#!/usr/bin/python

import sys,os,time,datetime,commands;
from optparse import OptionParser
from optparse import OptionGroup
start_time = time.time()

######################  Options and Initialization Parameters ######################
def function_print_usage():
    print "usage: %prog [options][inputs][outputs]"

parser = OptionParser()
usage="usage: %prog [options][inputs][outputs]"
parser=OptionParser(usage=usage, version="%prog 1.0")
parser.add_option("-i", type="string", help="Set your directory of input files or path")
parser.add_option("-o", type="string", default="./", help="output file directory path")

group=OptionGroup(parser,"db2ref")
#group.add_option("-i", type="string",help="Set your directory of dotbracket files")
#group.add_option("-o", type="string",help="output file directory path")
group.add_option("-t",help="number of threads")
group.add_option("--forgi", type="string",help="path of forgi software downloaded from github")

parser.add_option_group(group)

group=OptionGroup(parser,"eCLIPGoing")
group.add_option("--b1", help="one input .bam file")
group.add_option("--b2", help="another input .bam file")
group.add_option("--bc1", help="control mock .bamfile")
group.add_option("--bc2", help="control mock .bamfile")
group.add_option("--pv",type='float',default=0.01, help="threshold of p_value")
group.add_option("--rt",type='int',default=5, help="reads threshold of experiments")
group.add_option("--fc",type='int',default=2, help="threshold of experiment's reads divided by control's ,also called foldchange")
group.add_option("--extend",  type='int',default=20,help="number to extend of central position")
group.add_option("--ga", help="genome annotation file")
group.add_option("--anno", help="PARS or DMS processed results as reference, generated by db2ref")
parser.add_option_group(group)

group=OptionGroup(parser,"MotifCalling")
group.add_option("--name", help="protein's name or redefine itself")
group.add_option("--alp", help="alphabet of structure annotation(s,h,i,m)")
#group.add_option("-e", type='int',default=20 ,help="number to extend of central position")
group.add_option("--width",type='int',default=25,help="domain motif width")
group.add_option("--maxsite",type='int',default=4000,help="transcripts bindingsites of a protein")
group.add_option("--mRNAref",help="mRNA transcript name annotation")
#group.add_option("--str", help="structure detailed information (s,h,i,m) of protein")
parser.add_option_group(group)

(options, args) = parser.parse_args()
# Check Parameters

###### Get global arguments ######
if options.i:
    input_path=options.i
if options.o:
    output_path=options.o
scripts_folder=os.path.abspath(os.path.dirname(__file__))

###### db2ref ######
def db2ref():
    threads = options.t
    db2element_code_path = options.forgi + "/examples/dotbracket_to_element_string.py"
    os.popen("python " + scripts_folder + "/db_to_elementString.py -i " + input_path + " -t " + threads + " --forgi " + db2element_code_path + " -o " + output_path )
#
#
###### eCLIPGoing ######
### get arguments
if options.b1:
    halfLength=50
    minimum=500
    annotation=options.ga
    input_bam1=options.b1
    input_bam2=options.b2
    input_mock1=options.bc1
    input_mock2=options.bc2
    input_bam1_name=os.path.basename(input_bam1)
    input_bam2_name=os.path.basename(input_bam2)
    input_bam1_rt=output_path+"/"+input_bam1_name+".rt"
    input_bam2_rt=output_path+"/"+input_bam2_name+".rt"
    input_merged=output_path + "/bam.merged"
    mocktab1=output_path + "/mock1.rt"
    mocktab2=output_path + "/mock2.rt"
    mock_merged=output_path + "/mock.rt"
    ws = 100
    thre = 5
    sampleTime = 1000
    input_peak=output_path + "/bam.peak"
    peaktxt=output_path + "/peak.txt"
    p_value=options.pv
    reads_threshold=options.rt
    foldchange=options.fc
    filter_peaktxt=output_path + "/peak_filtered.txt"
    extend=options.extend
    structure = options.anno
    structOutput1 = output_path + "/bam.struct"
    structOutput2 = output_path + "/bam.structAnot"
#
def rtcount(input_bam,input_bam_rt,minimumNumber):
    os.popen("samtools view "+ input_bam +" > "+ input_bam +".sam")
    os.popen("python " + scripts_folder +"/rtCounts.py -l " + str(halfLength) + " -a " + annotation +" -m "+ str(minimumNumber) +" -i "+ input_bam +".sam"+" -o "+input_bam_rt )
    os.popen("rm "+ input_bam +".sam")
#
def merge(bam1_rt,bam2_rt,merged):
    os.popen("python " + scripts_folder +"/merge.py --t1 " + bam1_rt +" --t2 "+ bam2_rt + " -o " + merged )
#
def callPeak():
    os.popen("python " + scripts_folder + "/peak.py --ws " + str(ws) + " -n " + str(thre) + " -s " + str(sampleTime) + " -i " + input_merged + " -o " + input_peak )
#
def getRelEnrich():
    os.popen("python " + scripts_folder + "/mockenrichment.py -p " + input_peak + " -i " + input_merged + " -m " + mock_merged + " -o " + peaktxt )
#
def peakfilter():
    os.popen("python " + scripts_folder + "/peakfilter.py -p " + str(p_value) + " -r " + str(reads_threshold) + " -f " + str(foldchange) + " -i " + peaktxt + " -o " + filter_peaktxt)
#
def getStru():
    os.popen("python " + scripts_folder + "/getstructure.py -e " + str(extend) + " -i " + filter_peaktxt + " -s " + structure + " -o " + structOutput1 + " -p " + structOutput2)
#
def eCLIPGoing():
    rtcount(input_bam1,input_bam1_rt,str(minimum))
    rtcount(input_bam2,input_bam2_rt,str(minimum))
    rtcount(input_mock1,mocktab1,"0")
    rtcount(input_mock2,mocktab2,"0")
    print "RTCounts done\n"
    merge(input_bam1_rt,input_bam2_rt,input_merged)
    merge(mocktab1,mocktab2,mock_merged)
    print "merge done\n"
    callPeak()
    print "callpeak done\n"
    getRelEnrich()
    print "getRelEnrich done\n"
    peakfilter()
    print "peak filtered done\n"
#    getStru()
#    print "get structure done\n"

###### MotifCalling#######
###get arguments
if options.alp:
    protein_name=options.name
    structAnot=options.i
    alphabet=options.alp
    #extend=options.e
    domainMotif_width=options.width
    mRNA_ref=options.mRNAref
    #nmax_site=options.maxsite
    struct_path = output_path + "/" + protein_name + "_allsites"
    structMotif_folder = output_path + "/" + protein_name + "_structMotif"
    structMotif_fimo_folder = output_path + "/" + protein_name + "_fimo"
    structDataFrame_folder = output_path + "/" + protein_name + "_structDataFrame"
    seq_onStruct_folder = output_path + "/" + protein_name + "_seq_onStruct"
    seqMotif_onStruct_folder = output_path + "/" + protein_name + "_seqMotif_onStruct"
    seqMotif_dataframe_folder = output_path + "/" + protein_name + "_seqDataFrame"
#
def str2fa_structMotif():
    input_Site = commands.getstatusoutput("wc -l " + structAnot)[1].split(" ")[0]
    nmax_site=options.maxsite
    if int(nmax_site) < int(input_Site):
        os.popen("python " + scripts_folder + "/s001_prepare_fasta.py" + "\t" + structAnot + "\t" + output_path + "\t" + protein_name + "\t" + alphabet + "\t" + str(nmax_site)  + "\t" + str(domainMotif_width) + '\t' + mRNA_ref ) # + str(extend) )
        nmax_site=int(input_Site)
        os.popen("python " + scripts_folder + "/s001_prepare_fasta.py" + "\t" + structAnot + "\t" + output_path + "\t" + protein_name + "\t" + alphabet + "\t" + str(nmax_site)  + "\t" + str(domainMotif_width) + '\t' + mRNA_ref )
    if  int(nmax_site) >= int(input_Site):
        os.popen("python " + scripts_folder + "/s001_prepare_fasta.py" + "\t" + structAnot + "\t" + output_path + "\t" + protein_name + "\t" + alphabet + "\t" + str(nmax_site)  + "\t" + str(domainMotif_width) + '\t' + mRNA_ref )
#sys.exit("sorry, please check your parameter "maxsite" which should be smaller than your input_file rows")
def fimo_structMotif():
    os.popen("python " + scripts_folder + "/s004_get_structMotif_meme.py" + "\t" + structMotif_folder + "\t" + structMotif_fimo_folder + "\t" + struct_path + "\t" + protein_name)
def struct_DataFrame():
    os.popen("python " + scripts_folder + "/s006_structMotif_to_dataframe.py" + "\t" + structMotif_fimo_folder + "\t" + structDataFrame_folder )
def seq_onStruct():
    nmax_site=options.maxsite
    os.popen("python " + scripts_folder + "/s007_seq_for_struct_motif.py" + "\t" + structDataFrame_folder + "\t" + struct_path + "\t" + seq_onStruct_folder + "\t" + str(nmax_site) + "\t" + str(domainMotif_width) )
def seqMotif():
    os.popen("python " + scripts_folder + "/s008_seqMotif_on_structMotif.py" + "\t" + seq_onStruct_folder + "\t" + seqMotif_onStruct_folder)
def seq_DataFrame():
    os.popen("python " + scripts_folder + "/s009_seqMotif_to_dataframe.py" + "\t" + seqMotif_onStruct_folder + "\t" + seqMotif_dataframe_folder )
#
def MotifCalling():
    str2fa_structMotif()
    fimo_structMotif()
    struct_DataFrame()
    seq_onStruct()
    seqMotif()
    seq_DataFrame()
def main():
    if options.forgi: db2ref()
    if options.b1: eCLIPGoing()
    if options.alp: MotifCalling()
    if (options.forgi==False)&(options.b1==False)&(options.alp==False):
        db2ref()
        eCLIPGoing()
        MotifCalling()
#
if __name__=="__main__":
    main()
    runningTime=time.time() - start_time
    print runningTime






